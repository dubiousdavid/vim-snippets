# Control flow
snippet cond
	(cond
		${1:text-expr} ${2:result-expr}
		:else ${0})
snippet condp
	(condp ${1:pred} ${2:expr}
		${0})
snippet case
	(case ${1:expr}
		${2:test-constant} ${3:result-expr}
		${0})
snippet if
	(if ${1:test-expr}
		${2:then-expr}
		${0:else-expr})
snippet ifl "if-let"
	(if-let [${1:bindings}]
		${2:then-expr}
		${0:else-expr})
snippet when
	(when ${1:test}
		${0})
snippet whenl "when-let"
	(when-let [${1:result} ${2:test}]
		${0})
snippet loop "loop/recur"
	(loop [${1:bindings}]
		${0}
		(recur ${2:expr}))
snippet try "try/catch"
	(try
		${0}
		(catch ${1:Exception e} ${2}))
snippet let
	(let [${1:bindings}]
		${0})
snippet letfn
	(letfn [(${1:fname} [${2:params}]
						${3:exprs})]
		${0})
# def, functions, macros
snippet def
	(def ${1:name} ${0})
snippet defd "def dynamic"
	(def ^:dynamic ${1:name} ${0})
snippet defn
	(defn ${1:name}
		[${2}]
		${0})
snippet defn-
	(defn- ${1:name}
		[${2}]
		${0})
snippet fn
	(fn [${1:params}] ${0})
snippet defm "defmacro"
	(defmacro ${1:name}
		[${2}]
		${0})
snippet binding
	(binding [${1:bindings}]
		${0})
# Multi methods
snippet defmethod
	(defmethod ${1:multifn} "${2:doc-string}" ${3:dispatch-val} [${4:args}]
		${0})
snippet defmulti
	(defmulti ${1:name} "${2:doc-string}" ${0:dispatch-fn})
# Protocols/Types
snippet defp "defprotocol"
	(defprotocol ${1:name}
		${0})
snippet pmeth "protocol method"
	(${1:name} [${2:this} ${0:args}])
snippet extendp "extend-protocol"
	(extend-protocol ${1:Protocol}
		${2:Type}
			${0:methods})
snippet deft "deftype"
	(deftype ${1:Name} [${2:fields}]
		${3:Protocol}
		${0})
snippet extendt "extend-type"
	(extend-type ${1:Type}
		${2:Protocol}
		${0:methods})
snippet defr "defrecord"
	(defrecord ${1:name} [${2:fields}]
		${3:protocol}
		${0})
# Iteration
snippet doseq
	(doseq [${1:elem} ${2:coll}]
		${0})
snippet dotimes
	(dotimes [${1:bindings}]
		${0})
snippet method
	(${1:name} [${2:this} ${3:args}]
		${0})
snippet map "map anonymous fn"
	(map #(${1:lambda}) ${0})
snippet mapi "map-indexed"
	(map-indexed ${1:(fn [idx itm])} ${0})
snippet for
	(for [${1:seq-exprs}]
		${0})
snippet reduce
	(reduce ${1:(fn [acc x] acc)} ${2:init} ${0})
# Namespaces
snippet ns
	(ns ${0:name})
snippet imp "import"
	(:import [${1:package}])
		& {:keys [${1:keys}] :or {${0:defaults}}}
snippet refc "refer-clojure"
	(:refer-clojure :exclude [${0}])
snippet req "require with alias"
	(:require [${1:namespace} :as ${0:alias}])
snippet reqref "require refer"
	(:require [${1:namespace} :refer [${0}]])
snippet use
	(:use [${1:namespace} :only [${0}]])
# Testing
snippet deftest
	(deftest ${1:name}
		(is (= ${0:assertion})))
snippet is
	(is (= ${1} ${0}))
# Misc
snippet comm
	(comment
		${0})
snippet pr "println"
	(println ${0})
